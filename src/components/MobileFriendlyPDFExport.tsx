
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { FileDown, Printer, Share, Copy, Mail, Download } from 'lucide-react';
import { PrescriptionData } from '@/types/prescription';
import { toast } from '@/hooks/use-toast';
import { useIsMobile } from '@/hooks/use-mobile';
import jsPDF from 'jspdf';

interface MobileFriendlyPDFExportProps {
  prescriptionData: PrescriptionData;
  analysis: any;
}

const MobileFriendlyPDFExport = ({ prescriptionData, analysis }: MobileFriendlyPDFExportProps) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const isMobile = useIsMobile();

  const generatePDFContent = () => {
    return `
PRESCRIPTION ANALYSIS REPORT
AI-Powered Medical Safety Assessment

PATIENT INFORMATION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Patient Name: ${prescriptionData.patientName}
Age: ${prescriptionData.age} years
Gender: ${prescriptionData.gender}
Doctor: Dr. ${prescriptionData.doctorName}
Temperature: ${prescriptionData.temperature}°F
Blood Pressure: ${prescriptionData.bp}

PRESCRIBED MEDICATIONS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

${prescriptionData.medications.map(med => `
• ${med.name}
  Dosage: ${med.dosage}
  Frequency: ${med.frequency}
  Duration: ${med.duration}
`).join('')}

RISK ASSESSMENT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Overall Risk: ${analysis.overallRisk}

${analysis.drugInteractions && analysis.drugInteractions.length > 0 ? `
DRUG INTERACTIONS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

${analysis.drugInteractions.map((interaction: any) => `
• ${interaction.medications.join(' + ')} - ${interaction.severity}
  ${interaction.description}
`).join('')}
` : ''}

${analysis.recommendations && analysis.recommendations.length > 0 ? `
RECOMMENDATIONS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

${analysis.recommendations.map((rec: string) => `• ${rec}`).join('\n')}
` : ''}

Generated on: ${new Date().toLocaleDateString('en-US', { 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
})}

This report is generated by AI and should be reviewed by a qualified healthcare professional.
    `.trim();
  };

  const generatePDF = async () => {
    setIsGenerating(true);
    try {
      const doc = new jsPDF();
      const pageHeight = doc.internal.pageSize.height;
      const pageWidth = doc.internal.pageSize.width;
      const margin = 20;
      const lineHeight = 7;
      let yPosition = margin;

      // Title
      doc.setFontSize(18);
      doc.setFont(undefined, 'bold');
      doc.text('Prescription Analysis Report', pageWidth / 2, yPosition, { align: 'center' });
      yPosition += lineHeight * 2;

      doc.setFontSize(12);
      doc.setFont(undefined, 'normal');
      doc.text('AI-Powered Medical Safety Assessment', pageWidth / 2, yPosition, { align: 'center' });
      yPosition += lineHeight * 3;

      // Patient Information
      doc.setFontSize(14);
      doc.setFont(undefined, 'bold');
      doc.text('Patient Information', margin, yPosition);
      yPosition += lineHeight * 1.5;

      doc.setFontSize(10);
      doc.setFont(undefined, 'normal');
      const patientInfo = [
        `Patient Name: ${prescriptionData.patientName}`,
        `Age: ${prescriptionData.age} years`,
        `Gender: ${prescriptionData.gender}`,
        `Doctor: Dr. ${prescriptionData.doctorName}`,
        `Temperature: ${prescriptionData.temperature}°F`,
        `Blood Pressure: ${prescriptionData.bp}`
      ];

      patientInfo.forEach(info => {
        if (yPosition > pageHeight - margin) {
          doc.addPage();
          yPosition = margin;
        }
        doc.text(info, margin, yPosition);
        yPosition += lineHeight;
      });

      yPosition += lineHeight;

      // Medications
      doc.setFontSize(14);
      doc.setFont(undefined, 'bold');
      doc.text('Prescribed Medications', margin, yPosition);
      yPosition += lineHeight * 1.5;

      doc.setFontSize(10);
      doc.setFont(undefined, 'normal');
      prescriptionData.medications.forEach(med => {
        if (yPosition > pageHeight - margin * 2) {
          doc.addPage();
          yPosition = margin;
        }
        doc.text(`• ${med.name}`, margin, yPosition);
        yPosition += lineHeight;
        doc.text(`  Dosage: ${med.dosage}`, margin + 5, yPosition);
        yPosition += lineHeight;
        doc.text(`  Frequency: ${med.frequency}`, margin + 5, yPosition);
        yPosition += lineHeight;
        doc.text(`  Duration: ${med.duration}`, margin + 5, yPosition);
        yPosition += lineHeight * 1.5;
      });

      // Risk Assessment
      doc.setFontSize(14);
      doc.setFont(undefined, 'bold');
      doc.text('Risk Assessment', margin, yPosition);
      yPosition += lineHeight * 1.5;

      doc.setFontSize(10);
      doc.setFont(undefined, 'normal');
      doc.text(`Overall Risk: ${analysis.overallRisk}`, margin, yPosition);
      yPosition += lineHeight * 2;

      // Footer
      if (yPosition > pageHeight - margin * 3) {
        doc.addPage();
        yPosition = margin;
      }
      doc.setFontSize(8);
      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, pageHeight - margin);
      doc.text('This report is generated by AI and should be reviewed by a qualified healthcare professional.', margin, pageHeight - margin + 5);

      return doc;
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownloadPDF = async () => {
    try {
      const doc = await generatePDF();
      doc.save(`prescription-analysis-${prescriptionData.patientName.replace(/\s+/g, '-')}.pdf`);
      toast({
        title: "PDF Downloaded",
        description: "Prescription analysis has been downloaded successfully.",
      });
    } catch (error) {
      toast({
        title: "Download Failed",
        description: "Unable to generate PDF. Please try again.",
        variant: "destructive"
      });
    }
  };

  const handleShare = async () => {
    const content = generatePDFContent();
    
    if (navigator.share && isMobile) {
      try {
        await navigator.share({
          title: 'Prescription Analysis Report',
          text: content,
        });
        toast({
          title: "Shared Successfully",
          description: "Report has been shared.",
        });
      } catch (error) {
        if ((error as Error).name !== 'AbortError') {
          handleCopyToClipboard();
        }
      }
    } else {
      handleCopyToClipboard();
    }
  };

  const handleCopyToClipboard = async () => {
    try {
      const content = generatePDFContent();
      await navigator.clipboard.writeText(content);
      toast({
        title: "Copied to Clipboard",
        description: "Report content has been copied to your clipboard.",
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy to clipboard. Please try manual selection.",
        variant: "destructive"
      });
    }
  };

  const handleEmailExport = () => {
    const content = generatePDFContent();
    const subject = encodeURIComponent('Prescription Analysis Report');
    const body = encodeURIComponent(content);
    const mailtoLink = `mailto:?subject=${subject}&body=${body}`;
    
    window.location.href = mailtoLink;
    toast({
      title: "Email Opened",
      description: "Email application opened with report content.",
    });
  };

  const handleDownloadHTML = () => {
    const htmlContent = `
<!DOCTYPE html>
<html>
<head>
  <title>Prescription Analysis Report</title>
  <meta charset="utf-8">
  <style>
    body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
    h1 { color: #333; text-align: center; }
    h2 { color: #555; border-bottom: 2px solid #eee; padding-bottom: 5px; }
    .patient-info { background: #f9f9f9; padding: 15px; border-radius: 5px; }
    .medication { background: #fff; border: 1px solid #ddd; padding: 10px; margin: 10px 0; border-radius: 5px; }
    .risk-high { color: #dc2626; font-weight: bold; }
    .risk-medium { color: #d97706; font-weight: bold; }
    .risk-low { color: #16a34a; font-weight: bold; }
  </style>
</head>
<body>
  <h1>Prescription Analysis Report</h1>
  <p style="text-align: center; color: #666;">AI-Powered Medical Safety Assessment</p>
  
  <div class="patient-info">
    <h2>Patient Information</h2>
    <p><strong>Patient Name:</strong> ${prescriptionData.patientName}</p>
    <p><strong>Age:</strong> ${prescriptionData.age} years</p>
    <p><strong>Gender:</strong> ${prescriptionData.gender}</p>
    <p><strong>Doctor:</strong> Dr. ${prescriptionData.doctorName}</p>
    <p><strong>Temperature:</strong> ${prescriptionData.temperature}°F</p>
    <p><strong>Blood Pressure:</strong> ${prescriptionData.bp}</p>
  </div>

  <h2>Prescribed Medications</h2>
  ${prescriptionData.medications.map(med => `
    <div class="medication">
      <h3>${med.name}</h3>
      <p><strong>Dosage:</strong> ${med.dosage}</p>
      <p><strong>Frequency:</strong> ${med.frequency}</p>
      <p><strong>Duration:</strong> ${med.duration}</p>
    </div>
  `).join('')}

  <h2>Risk Assessment</h2>
  <p class="risk-${analysis.overallRisk.toLowerCase()}">Overall Risk: ${analysis.overallRisk}</p>

  <p style="margin-top: 40px; font-size: 12px; color: #666; text-align: center;">
    Generated on ${new Date().toLocaleDateString()}<br>
    This report is generated by AI and should be reviewed by a qualified healthcare professional.
  </p>
</body>
</html>
    `;

    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `prescription-analysis-${prescriptionData.patientName.replace(/\s+/g, '-')}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "HTML Downloaded",
      description: "Report has been downloaded as HTML file.",
    });
  };

  const handlePrint = () => {
    if (isMobile) {
      toast({
        title: "Print on Mobile",
        description: "For best results, download the PDF or HTML file and print from your device's file manager.",
      });
      return;
    }

    const content = generatePDFContent();
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      toast({
        title: "Print Blocked",
        description: "Please allow popups and try again, or use the download option.",
        variant: "destructive"
      });
      return;
    }

    printWindow.document.write(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Prescription Analysis Report</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            pre { white-space: pre-wrap; font-family: Arial, sans-serif; }
          </style>
        </head>
        <body>
          <pre>${content}</pre>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
    printWindow.close();
  };

  if (isMobile) {
    return (
      <div className="space-y-3">
        <div className="grid grid-cols-2 gap-3">
          <Button
            onClick={handleDownloadPDF}
            disabled={isGenerating}
            className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white text-sm py-2 px-3"
          >
            <FileDown className="h-4 w-4 mr-2" />
            {isGenerating ? 'Generating...' : 'PDF'}
          </Button>
          <Button
            onClick={handleShare}
            variant="outline"
            className="border-2 border-gray-200 hover:border-purple-300 hover:bg-purple-50 text-sm py-2 px-3"
          >
            <Share className="h-4 w-4 mr-2" />
            Share
          </Button>
        </div>
        <div className="grid grid-cols-2 gap-3">
          <Button
            onClick={handleDownloadHTML}
            variant="outline"
            className="border-2 border-gray-200 hover:border-blue-300 hover:bg-blue-50 text-sm py-2 px-3"
          >
            <Download className="h-4 w-4 mr-2" />
            HTML
          </Button>
          <Button
            onClick={handleEmailExport}
            variant="outline"
            className="border-2 border-gray-200 hover:border-green-300 hover:bg-green-50 text-sm py-2 px-3"
          >
            <Mail className="h-4 w-4 mr-2" />
            Email
          </Button>
        </div>
        <Button
          onClick={handleCopyToClipboard}
          variant="outline"
          className="w-full border-2 border-gray-200 hover:border-orange-300 hover:bg-orange-50 text-sm py-2"
        >
          <Copy className="h-4 w-4 mr-2" />
          Copy Text
        </Button>
      </div>
    );
  }

  return (
    <div className="flex space-x-3">
      <Button
        onClick={handleDownloadPDF}
        disabled={isGenerating}
        className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transition-all duration-300"
      >
        <FileDown className="h-4 w-4 mr-2" />
        {isGenerating ? 'Generating PDF...' : 'Export PDF'}
      </Button>
      <Button
        onClick={handlePrint}
        variant="outline"
        className="border-2 border-gray-200 hover:border-purple-300 hover:bg-purple-50 transition-all duration-300"
      >
        <Printer className="h-4 w-4 mr-2" />
        Print Report
      </Button>
      <Button
        onClick={handleShare}
        variant="outline"
        className="border-2 border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-300"
      >
        <Share className="h-4 w-4 mr-2" />
        Share
      </Button>
    </div>
  );
};

export default MobileFriendlyPDFExport;
